Description: This template creates an autoscaling group running nginx

Transform: AWS::LanguageExtensions

Parameters:
  Name:
    Description: The name of the application
    Type: String
  VpcId:
    Description: The ID of the VPC to use
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: The subnet to create the instances in
    Type: List<AWS::EC2::Subnet::Id>
  AmiId:
    Description: AMI to use for the instances
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # Fetch and use the latest AL2023 image
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64
  MinInstances:
    Description: Minimum number of nginx instances to run
    Type: Number
    MinValue: 1
    Default: 1
  MaxInstances:
    Description: Maximum number of nginx instances to run
    Type: Number
    MinValue: 1
    Default: 1
  InstanceProfileArn:
    Description: The ARN of the instance profile to use
    Type: String

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: nginx server
      GroupName:
        Fn::Sub: ${AWS::StackName}-${Name}
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      Tags:
      - Key: Name
        Value:
          Ref: Name
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 10
      Tags:
      - Key: Name
        Value:
          Ref: Name
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName:
        Fn::Sub: ${AWS::StackName}-${Name}
      LaunchTemplateData:
        ImageId:
          Ref: AmiId
        InstanceType: t3.micro
        UserData:
          Fn::Base64:
            Fn::Join:
            - "\n"
            - - '#!/bin/bash'
              - export AWS_REGION=$(ec2-metadata --region --quiet)
              - yum update --assumeyes
              # Install Nginx and SSM agent
              - yum install --assumeyes nginx https://s3.${AWS_REGION}.amazonaws.com/amazon-ssm-${AWS_REGION}/latest/linux_amd64/amazon-ssm-agent.rpm
              # Start Nginx
              - systemctl enable nginx --now
              - systemctl status nginx
              # Start SSM Agent
              - systemctl enable amazon-ssm-agent --now
              - systemctl status amazon-ssm-agent
              # Update nginx default page to simulate deploying the application
              - Fn::Sub: echo Hello from ${Name} > /usr/share/nginx/html/index.html
        SecurityGroupIds:
        - Ref: SecurityGroup
        IamInstanceProfile:
          Arn:
            Ref: InstanceProfileArn
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        SuspendProcesses:
        - AZRebalance
    Properties:
      AutoScalingGroupName:
        Fn::Sub: ${AWS::StackName}-${Name}
      LaunchTemplate:
        LaunchTemplateId:
          Ref: LaunchTemplate
        Version:
          Fn::GetAtt:
          - LaunchTemplate
          - LatestVersionNumber
      MinSize:
        Ref: MinInstances
      MaxSize:
        Ref: MaxInstances
      VPCZoneIdentifier:
        Ref: SubnetIds
      TargetGroupARNs:
      - Ref: TargetGroup
      HealthCheckType:  ELB
      Tags:
      - Key: Name
        Value:
          Ref: Name
        PropagateAtLaunch: 'true'

Outputs:
  TargetGroupArn:
    Description: The ARN of the target group for the app
    Value:
      Ref: TargetGroup
